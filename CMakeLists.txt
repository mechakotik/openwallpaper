cmake_minimum_required(VERSION 4.0)
project(wallpaperd)

include(GNUInstallDirs)

option(WD_WLROOTS "Enable wlroots output support" OFF)

option(WD_SDL_SHARED "Dynamically link to system SDL" OFF)
option(WD_SDL_IMAGE_SHARED "Dynamically link to system SDL_image" OFF)
option(WD_SDL_MIXER_SHARED "Dynamically link to system SDL_mixer" OFF)
option(WD_SDL_SHADERCROSS_SHARED "Dynamically link to system SDL_shadercross" OFF)
option(WD_LIBZIP_SHARED "Dynamically link to system libzip" OFF)

option(WD_SANITIZE "Build with sanitizers" OFF)

set(BUILD_SHARED_LIBS OFF)

if(WD_SANITIZE)
    add_compile_options(-fsanitize=address,leak,undefined -fno-sanitize=alignment)
    add_link_options(-fsanitize=address,leak,undefined -fno-sanitize=alignment)
endif()

file(GLOB_RECURSE WD_SOURCES src/*.c)
add_executable(wallpaperd ${WD_SOURCES})
target_include_directories(wallpaperd PRIVATE include)

if(WD_SDL_SHARED)
    find_package(SDL3 REQUIRED CONFIG REQUIRED COMPONENTS SDL3-shared)
    target_link_libraries(wallpaperd PRIVATE SDL3::SDL3-shared)
else()
    set(SDL_STATIC ON)
    set(SDL_DISABLE_INSTALL ON)
    add_subdirectory(external/SDL EXCLUDE_FROM_ALL)
    target_link_libraries(wallpaperd PRIVATE SDL3::SDL3-static)
    target_include_directories(wallpaperd PRIVATE external/SDL/include)
endif()

if(WD_SDL_IMAGE_SHARED)
    find_package(SDL3_image REQUIRED CONFIG REQUIRED COMPONENTS SDL3_image-shared)
    target_link_libraries(wallpaperd PRIVATE SDL3_image::SDL3_image-shared)
else()
    set(SDLIMAGE_VENDORED ON)
    set(SDLIMAGE_DEPS_SHARED OFF)
    set(SDLIMAGE_INSTALL OFF)
    set(SDLIMAGE_PNG ON)
    set(SDLIMAGE_AVIF OFF)
    set(SDLIMAGE_BMP OFF)
    set(SDLIMAGE_GIF OFF)
    set(SDLIMAGE_JPG OFF)
    set(SDLIMAGE_JXL OFF)
    set(SDLIMAGE_LBM OFF)
    set(SDLIMAGE_PCX OFF)
    set(SDLIMAGE_PNM OFF)
    set(SDLIMAGE_QOI OFF)
    set(SDLIMAGE_SVG OFF)
    set(SDLIMAGE_TGA OFF)
    set(SDLIMAGE_TIF OFF)
    set(SDLIMAGE_WEBP OFF)
    set(SDLIMAGE_XCF OFF)
    set(SDLIMAGE_XPM OFF)
    set(SDLIMAGE_XV OFF)
    add_subdirectory(external/SDL_image EXCLUDE_FROM_ALL)
    target_link_libraries(wallpaperd PRIVATE SDL3_image::SDL3_image-static)
    target_include_directories(wallpaperd PRIVATE external/SDL_image/include)
endif()

if(WD_SDL_MIXER_SHARED)
    find_package(SDL3_mixer REQUIRED CONFIG REQUIRED COMPONENTS SDL3_mixer-shared)
    target_link_libraries(wallpaperd PRIVATE SDL3_mixer::SDL3_mixer-shared)
else()
    set(SDLMIXER_VENDORED ON)
    set(SDLMIXER_DEPS_SHARED OFF)
    set(SDLMIXER_INSTALL OFF)
    set(SDLMIXER_GME OFF)
    set(SDLMIXER_FLAC OFF)
    set(SDLMIXER_MOD OFF)
    set(SDLMIXER_MP3 OFF)
    set(SDLMIXER_MIDI OFF)
    set(SDLMIXER_OPUS OFF)
    set(SDLMIXER_WAVE OFF)
    set(SDLMIXER_WAVPACK OFF)
    add_subdirectory(external/SDL_mixer EXCLUDE_FROM_ALL)
    target_link_libraries(wallpaperd PRIVATE SDL3_mixer::SDL3_mixer-static)
    target_include_directories(wallpaperd PRIVATE external/SDL_mixer/include)
endif()

if(WD_SDL_SHADERCROSS_SHARED)
    find_package(SDL3_shadercross REQUIRED CONFIG REQUIRED COMPONENTS SDL3_shadercross-shared)
    target_link_libraries(wallpaperd PRIVATE SDL3_shadercross::SDL3_shadercross-shared)
else()
    set(SDLSHADERCROSS_VENDORED ON)
    set(SDLSHADERCROSS_STATIC ON)
    set(SDLSHADERCROSS_DXC OFF)
    set(SDLSHADERCROSS_SPIRVCROSS_SHARED OFF)
    add_subdirectory(external/SDL_shadercross EXCLUDE_FROM_ALL)
    target_link_libraries(wallpaperd PRIVATE SDL3_shadercross::SDL3_shadercross-static)
    target_include_directories(wallpaperd PRIVATE external/SDL_shadercross/include)
endif()

if(WD_LIBZIP_SHARED)
    find_package(libzip REQUIRED CONFIG)
    target_link_libraries(wallpaperd PRIVATE zip)
else()
    set(ZLIB_BUILD_SHARED OFF)
    add_subdirectory(external/zlib EXCLUDE_FROM_ALL)
    # hack to make find_package(ZLIB) use static zlib
    add_library(ZLIB::ZLIB ALIAS zlibstatic)

    set(BUILD_DOC OFF)
    set(BUILD_EXAMPLES OFF)
    set(BUILD_TOOLS OFF)
    set(ENABLE_BZIP2 OFF)
    set(ENABLE_LZMA OFF)
    set(ENABLE_ZSTD OFF)
    set(LIBZIP_DO_INSTALL OFF)
    add_subdirectory(external/libzip EXCLUDE_FROM_ALL)
    target_link_libraries(wallpaperd PRIVATE zip zlibstatic)
endif()

set(WAMR_BUILD_PLATFORM "linux")
set(WAMR_BUILD_TARGET "X86_64")
set(WAMR_BUILD_INTERP 1)
set(WAMR_BUILD_FAST_INTERP 1)
set(WAMR_BUILD_AOT 1)
set(WAMR_BUILD_LIBC_BUILTIN 1)
set(WAMR_BUILD_LIBC_WASI 1)
set(WAMR_BUILD_REF_TYPES 1)
set(WAMR_ROOT_DIR external/wasm-micro-runtime)

include(${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)
include(${SHARED_DIR}/utils/uncommon/shared_uncommon.cmake)
add_library(vmlib ${WAMR_RUNTIME_LIB_SOURCE})
target_sources(wallpaperd PRIVATE ${UNCOMMON_SHARED_SOURCE})
target_link_libraries(wallpaperd PRIVATE vmlib)

if(WD_WLROOTS)
    find_program(WAYLAND_SCANNER NAMES wayland-scanner)
    if(NOT WAYLAND_SCANNER)
        message(FATAL_ERROR "wayland-scanner not found")
    endif()

    function(add_protocol PROTOCOL_NAME)
        set(PROTOCOL_XML "${CMAKE_CURRENT_SOURCE_DIR}/wayland/${PROTOCOL_NAME}.xml")
        set(PROTOCOL_C "${CMAKE_CURRENT_BINARY_DIR}/${PROTOCOL_NAME}.c")
        set(PROTOCOL_H "${CMAKE_CURRENT_BINARY_DIR}/${PROTOCOL_NAME}.h")

        add_custom_command(
            OUTPUT ${PROTOCOL_C} ${PROTOCOL_H}
            COMMAND ${WAYLAND_SCANNER} private-code ${PROTOCOL_XML} ${PROTOCOL_C}
            COMMAND ${WAYLAND_SCANNER} client-header ${PROTOCOL_XML} ${PROTOCOL_H}
            DEPENDS ${PROTOCOL_XML}
        )

        target_sources(wallpaperd PRIVATE ${PROTOCOL_C})
        target_include_directories(wallpaperd PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    endfunction()

    add_protocol(xdg-shell)
    add_protocol(wlr-layer-shell-unstable-v1)
    target_link_libraries(wallpaperd PRIVATE wayland-client)
    target_compile_definitions(wallpaperd PRIVATE -DWD_WLROOTS)
endif()

install(TARGETS wallpaperd RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

